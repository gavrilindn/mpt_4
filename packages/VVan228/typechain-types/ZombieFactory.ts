/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface ZombieFactoryInterface extends utils.Interface {
  functions: {
    "createRandomZombie(string)": FunctionFragment;
    "zombies(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createRandomZombie" | "zombies"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createRandomZombie",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "zombies",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createRandomZombie",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zombies", data: BytesLike): Result;

  events: {
    "NewZombie(uint256,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewZombie"): EventFragment;
}

export interface NewZombieEventObject {
  zombieId: BigNumber;
  name: string;
  dna: BigNumber;
}
export type NewZombieEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  NewZombieEventObject
>;

export type NewZombieEventFilter = TypedEventFilter<NewZombieEvent>;

export interface ZombieFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZombieFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createRandomZombie(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zombies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; dna: BigNumber }>;
  };

  createRandomZombie(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zombies(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; dna: BigNumber }>;

  callStatic: {
    createRandomZombie(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    zombies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; dna: BigNumber }>;
  };

  filters: {
    "NewZombie(uint256,string,uint256)"(
      zombieId?: null,
      name?: null,
      dna?: null
    ): NewZombieEventFilter;
    NewZombie(zombieId?: null, name?: null, dna?: null): NewZombieEventFilter;
  };

  estimateGas: {
    createRandomZombie(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zombies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createRandomZombie(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zombies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
